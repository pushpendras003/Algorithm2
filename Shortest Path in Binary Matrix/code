class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = size(grid);
        if (grid[0][0] || grid[n-1][n-1]) return -1;
        queue<pair<int, int>> q;
        q.emplace(0, 1), grid[0][0] = 1;
        while (!q.empty()) {
            auto [pos, len] = q.front(); q.pop();
            int i = pos / n, j = pos % n;
            if (i == n-1 && j == n-1) return len;
            for (int ii = max(0, i-1); ii < min(n, i+2); ii++) {
                for (int jj = max(0, j-1); jj < min(n, j+2); jj++) {
                    if (grid[ii][jj] == 0)
                        grid[ii][jj] = 1, q.emplace(ii*n+jj, len+1);
                }
            }
        }
        return -1;
    }
};
